version: '3.8'

services:
  # NEURICX R API Server
  neuricx-api:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - R_LIBS_USER=/usr/local/lib/R/site-library
      - NEURICX_ENV=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://neuricx:neuricx_pass@postgres:5432/neuricx
    volumes:
      - ../R:/app/R
      - ../data:/app/data
      - neuricx-logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Real-time Data Streaming Service
  neuricx-streaming:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.streaming
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - API_KEYS_FILE=/app/config/api_keys.json
    volumes:
      - ../R:/app/R
      - ./config:/app/config
      - neuricx-streaming-data:/app/streaming_data
    depends_on:
      - redis
      - kafka
    restart: unless-stopped

  # Dashboard Web Interface
  neuricx-dashboard:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://neuricx-api:8000
      - REACT_APP_WS_URL=ws://neuricx-streaming:8001
    volumes:
      - ../NEURICX_Web:/app/web
    restart: unless-stopped

  # Quantum Computing Service
  neuricx-quantum:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.quantum
    ports:
      - "8002:8002"
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
      - IONQ_API_TOKEN=${IONQ_API_TOKEN}
      - NEURICX_QUANTUM_BACKEND=simulator
    volumes:
      - ../R:/app/R
      - neuricx-quantum-data:/app/quantum_data
    restart: unless-stopped

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=neuricx
      - POSTGRES_USER=neuricx
      - POSTGRES_PASSWORD=neuricx_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # Apache Kafka for real-time data streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # NGINX reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - neuricx-static:/usr/share/nginx/html
    depends_on:
      - neuricx-api
      - neuricx-dashboard
    restart: unless-stopped

  # Jupyter Lab for interactive analysis
  jupyter:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=neuricx_jupyter_token
    volumes:
      - ../:/app/neuricx
      - jupyter-data:/home/jovyan/work
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  kafka-data:
  zookeeper-data:
  prometheus-data:
  grafana-data:
  neuricx-logs:
  neuricx-streaming-data:
  neuricx-quantum-data:
  neuricx-static:
  jupyter-data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16